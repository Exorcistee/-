ADR - Выбор фреймворка для разработки клиента TikTok

Дата: 25 сентября 2024 года

Статус: Принято

Контекст

Для разработки клиентской части приложения TikTok необходимо выбрать фреймворк, который обеспечит поддержку мобильных платформ (iOS и Android), а также веб-версии. Важно, чтобы фреймворк обеспечивал высокую производительность и отзывчивость интерфейса, а также позволял быстро разрабатывать и поддерживать код. Учитывая требования к функциональности и пользовательскому опыту, выбор фреймворка должен соответствовать потребностям проекта.

Рассматриваемые варианты

- Native (Android/iOS/Web): Разработка нативных приложений для каждой платформы.
 
  Плюсы:
  - Высокая производительность и оптимизация под каждую платформу.
  - Доступ ко всем возможностям платформы и API.

  Минусы:
  - Долгое время разработки из-за необходимости создания отдельных приложений для каждой платформы.
  - Увеличенные затраты на поддержку нескольких кодовых баз.

- React Native: Фреймворк для создания мобильных приложений с использованием React.

  Плюсы:
  - Позволяет использовать один код для iOS и Android, что сокращает время разработки.
  - Высокая производительность благодаря нативным компонентам.

  Минусы:
  - Ограниченный доступ к некоторым нативным API.
  - Возможные проблемы с производительностью при сложных интерфейсах.
  - Не используется с Kotlin

- Flutter: Фреймворк от Google для создания кросс-платформенных приложений.

  Плюсы:
  - Высокая производительность благодаря компиляции в нативный код.
  - Возможность создания красивых интерфейсов с помощью виджетов.

  Минусы:
  - Меньшая экосистема по сравнению с более устоявшимися фреймворками.
  - Более высокая кривая обучения для разработчиков, не знакомых с Dart.
   - Не используется с Kotlin

- Compose Multiplatform: Фреймворк от JetBrains для создания кросс-платформенных приложений на Kotlin.

  Плюсы:
  - Позволяет использовать один код для iOS и Android, что сокращает время разработки.
  - Современный подход к разработке интерфейсов с использованием декларативного стиля.
  - Подходит под выбранный язык разработки клиентской части.

  Минусы:
  - Меньшая зрелость по сравнению с другими фреймворками.
  - Ограниченная поддержка со стороны сообщества и документации.

Решение

Принято решение использовать Compose Multiplatform в качестве основного фреймворка для разработки клиентской части TikTok.

Обоснование
Compose Multiplatform был выбран из-за следующих причин:
Кросс-платформенность: Возможность использования одного кода для создания приложений как для iOS, так и для Android значительно сокращает время разработки и затраты на поддержку.
Интеграция с Kotlin: Поскольку команда уже использует Kotlin для разработки, использование Compose Multiplatform является целесообразным.
Декларативный подход: Современный декларативный стиль разработки интерфейсов облегчает создание и поддержку UI, делая код более читаемым и поддерживаемым.
Поддержка от JetBrains: Compose Multiplatform активно развивается компанией JetBrains, которая имеет богатый опыт в создании инструментов для разработчиков на Kotlin.

Последствия
Выбор Compose Multiplatform как основного фреймворка будет иметь следующие последствия:
Плюсы:
Повышение скорости разработки благодаря кросс-платформенности и возможности повторного использования кода.
Единая кодовая база на Kotlin, что упрощает поддержку и развитие приложения.
Современные инструменты разработки и декларативный подход к созданию интерфейсов способствуют более быстрому внедрению новых функций и улучшений.
Лучшая интеграция с существующей инфраструктурой на Kotlin, что минимизирует необходимость обучения новым языкам или технологиям.
Минусы:
Необходимость обучения команды: Если у команды нет опыта работы с Compose Multiplatform, потребуется время на освоение фреймворка и его особенностей.
Риски
Потенциальные проблемы с интеграцией сторонних библиотек: Это можно минимизировать путем тщательного выбора библиотек, совместимых с Compose Multiplatform, и проведения предварительного тестирования.
Сложности при найме разработчиков, знакомых с Compose Multiplatform: Решением может быть организация обучения для существующих сотрудников или привлечение специалистов с опытом работы с Kotlin и Compose.
Зрелость фреймворка: Поскольку Compose Multiplatform относительно новый, возможны неожиданные баги или отсутствующие функции, которые потребуют обходных решений или ожидания обновлений от JetBrains.
Затронутые области
Данное решение затронет следующие области системы:
Архитектура клиентской части: Необходимость интеграции кода на Compose Multiplatform в единую систему и обеспечение совместимости с существующими модулями.
Инфраструктура: Обеспечение необходимых ресурсов и инструментов для разработки на Compose Multiplatform, включая интеграцию с системами сборки и CI/CD.
Процессы разработки: Адаптация процессов разработки и тестирования для работы с выбранным фреймворком, включая внедрение новых практик и инструментов.

История
24.09.2024, Щетиловым, Уразаевым, Петуховым. Основные обсуждения касались требований к фреймворку для разработки клиента, в результате которых был выбран Compose Multiplatform.
