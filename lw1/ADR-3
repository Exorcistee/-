ADR - Микросервисная архитектура для приложения TikTok
Дата: 15 сентября 2024 года 
Статус: Принято
Контекст
       Для приложения TikTok необходимо выбрать архитектурный стиль, который обеспечит высокую производительность, масштабируемость и управляемость системы. Учитывая огромные объемы данных и количество пользователей, архитектура должна позволять быстро добавлять новые функции и масштабировать отдельные компоненты. Основные ограничения включают необходимость обеспечения высокой доступности и минимизации времени простоя. 
Бюджет составляет  $1000000. Для реализации проекта задействовано 50 сотрудников.
Рассматриваемые варианты
Монолитная архитектура: Все компоненты приложения объединены в единую систему.
Микросервисная архитектура: Приложение разделено на независимые сервисы, каждый из которых отвечает за отдельную функциональность.
Модульная архитектура: Приложение состоит из модулей, которые могут быть связаны друг с другом, но не обязательно являются независимыми сервисами.
Плюсы и минусы рассматриваемых вариантов
Монолитная архитектура 
Плюсы:
Простота разработки и развертывания, особенно для небольших команд.
Легкость в тестировании и отладке благодаря единой кодовой базе.
Низкие начальные затраты на инфраструктуру.
Минусы:
Проблемы со масштабируемостью: для увеличения производительности нужно масштабировать всю систему.
Трудности в интеграции новых технологий.
Риск полного сбоя системы при ошибках в любом из компонентов.
Микросервисная архитектура 
Плюсы:
Высокая масштабируемость: возможность независимого масштабирования отдельных сервисов.
Изоляция сбоев: сбой одного сервиса не влияет на работу остальных.
Гибкость в выборе технологий для каждого сервиса.
Минусы:
Увеличенная сложность управления множеством сервисов.
Более высокие операционные расходы из-за необходимости поддерживать несколько баз данных и логов.
Усложненное тестирование и отладка из-за необходимости взаимодействия между сервисами.
Модульная архитектура 
Плюсы:
Возможность разделения функциональности на модули, что упрощает понимание кода.
Легкость в обновлении отдельных модулей без необходимости изменения всей системы.
Минусы:
Модули могут быть зависимыми друг от друга, что может привести к сложностям при изменении.
Не такая высокая степень независимости, как у микросервисов.
Решение
Принято решение использовать микросервисную архитектуру для разработки приложения TikTok.
Обоснование
Микросервисная архитектура была выбрана по следующим причинам:
Масштабируемость: Микросервисы позволяют независимо масштабировать каждый компонент в зависимости от нагрузки. Это особенно важно для TikTok, где разные функции могут иметь разные требования к ресурсам.
Управляемость: Каждый микросервис может быть разработан, развернут и обновлен независимо от других, что упрощает управление проектом и позволяет командам работать параллельно.
Гибкость: Микросервисы позволяют использовать различные технологии и языки программирования для разных компонентов, что может повысить производительность и упростить интеграцию новых функций.
Альтернативы, такие как монолитная и модульная архитектуры, были отвергнуты из-за их ограничений в масштабируемости и гибкости. Монолитная архитектура может привести к затруднениям при масштабировании и внедрении новых функций, а модульная архитектура не обеспечивает такой же независимости компонентов, как микросервисы.
Последствия
Выбор микросервисной архитектуры будет иметь следующие последствия: Плюсы:
Возможность быстрого развертывания новых функций без влияния на другие компоненты.
Улучшенная отказоустойчивость: сбой одного сервиса не влияет на работу всего приложения.
Гибкость в выборе технологий для каждого сервиса.
Минусы:
Увеличение сложности системы из-за необходимости управления множеством сервисов.
Необходимость в более сложной инфраструктуре для развертывания и мониторинга микросервисов.
Риски:
Потенциальные проблемы с взаимодействием между сервисами. Это можно минимизировать с помощью четко определенных API и протоколов взаимодействия.
Увеличенные затраты на поддержку инфраструктуры. Решением может быть использование облачных решений для упрощения управления.
Затронутые области
Данное решение затронет следующие области системы:
Архитектура серверной части: Необходимость интеграции микросервисов в единую систему.
Инфраструктура: Обеспечение необходимых ресурсов и инструментов для развертывания микросервисов.
Процессы разработки: Адаптация процессов разработки и тестирования для работы с микросервисами.


История
15.09.2024, Щетиловым, Уразаевым, Петуховым. Основные обсуждения касались требований к архитектурному стилю, в результате которых мы пришли к микросервисной.

