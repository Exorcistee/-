ADR - Выбор языка программирования для клиентской части TikTok

Дата: 24 сентября 2024 года
Статус: Принято

Контекст

Для клиентской части приложения TikTok необходимо выбрать язык программирования, который обеспечит высокую производительность, отзывчивость интерфейса и безопасность данных. Приложение должно поддерживать мобильные платформы (iOS и Android), а также веб-версии для обеспечения доступа пользователей на различных устройствах. Учитывая требования к производительности и безопасности, важно, чтобы выбранный язык позволял быстро разрабатывать и поддерживать код.

Рассматриваемые варианты

Java: Широко используемый язык для разработки Android-приложений.
 
  Плюсы:
  - Большая экосистема библиотек и фреймворков.
  - Широкая поддержка со стороны сообщества.
  - Хорошая производительность на Android.

  Минусы:
  - Более сложный синтаксис по сравнению с современными языками.
  - Долгое время компиляции и более высокие затраты на разработку.

C++: Высокоэффективный язык, но сложный в разработке и отладке.

  Плюсы:
  - Высокая производительность и контроль над ресурсами.
  - Подходит для разработки игр и приложений с высоким требованием к производительности.

  Минусы:
  - Сложность в разработке и отладке кода.
  - Отсутствие стандартных библиотек для мобильной разработки.

JavaScript (TypeScript): Основной язык для веб-разработки, позволяющий создавать динамичные интерфейсы.

  Плюсы:
  - Широкая распространенность и поддержка в веб-разработке.
  - Кроссплатформенность.
  - TypeScript добавляет статическую типизацию, что улучшает качество кода.
  - Легкость интеграции с существующими веб-технологиями.

  Минусы:
  - Меньшая производительность по сравнению с нативными языками на мобильных платформах.
  - Зависимость от браузеров и их особенностей.

 Rust: Современный язык с акцентом на безопасность и производительность, но с меньшей популярностью в мобильной разработке.

  Плюсы:
  - Высокая производительность и безопасность благодаря строгой типизации.
  - Отличная поддержка многопоточности.

  Минусы:
  - Меньшая экосистема библиотек для мобильной разработки.
  - Более крутая кривая обучения по сравнению с другими языками.

Kotlin: Официальный язык для разработки Android-приложений, обладающий современными возможностями и хорошей интеграцией с Java.

  Плюсы:
  - Лаконичный синтаксис и современные возможности языка.
  - Полная совместимость с Java, что позволяет использовать существующие библиотеки.
  - Поддержка со стороны Google как официального языка для Android.

  Минусы:
  - Меньшее количество ресурсов по сравнению с Java.

C#: Используется для разработки приложений на платформе Xamarin, что позволяет создавать кросс-платформенные мобильные приложения.

  Плюсы:
  - Возможность создания кросс-платформенных приложений с использованием одного кода.
  - Хорошая интеграция с .NET экосистемой.

  Минусы:
  - Зависимость от платформы Xamarin, что может ограничить доступность функций.
  - Меньшая популярность среди мобильных разработчиков по сравнению с Java/Kotlin.

Python: Высокоуровневый язык, но не оптимален для мобильной разработки.

  Плюсы:
  - Простота в изучении и использовании.
  - Широкая экосистема библиотек для различных задач.

  Минусы:
  - Низкая производительность на мобильных устройствах.
  - Ограниченная поддержка нативной мобильной разработки.

WASM (WebAssembly): Позволяет запускать код на вебе с высокой производительностью, но требует дополнительных усилий для интеграции с JavaScript.

  Плюсы:
  - Высокая производительность при выполнении кода в браузере.
  - Возможность использования различных языков (например, Rust) для компиляции в WASM.

  Минусы:
  - Сложность интеграции с существующими веб-технологиями.
  - Ограниченная поддержка функциональности по сравнению с нативными приложениями.
Решение
Принято решение использовать Kotlin в качестве основного языка программирования для клиентской части TikTok на платформе Android/IOS и JavaScript (TypeScript) для веб-версии.
Обоснование
Kotlin был выбран из-за следующих причин:
Современные возможности: Kotlin предлагает лаконичный синтаксис и мощные функции, что упрощает разработку мобильных приложений.
 Интеграция с Java: Kotlin полностью совместим с Java, что позволяет использовать существующие библиотеки и фреймворки Android.
Поддержка Google: Kotlin является официальным языком для разработки Android-приложений, что обеспечивает долгосрочную поддержку и обновления.
JavaScript (TypeScript) был выбран для веб-версии из-за его широкой распространенности и возможности создания динамичных интерфейсов. TypeScript добавляет статическую типизацию, что улучшает качество кода и упрощает его поддержку.

Альтернативы, такие как Java или C#, были рассмотрены, но были отвергнуты из-за меньшей гибкости или ограниченной поддержки на мобильных платформах. C++ также был отвергнут из-за сложности разработки и отладки.

Последствия

Выбор Kotlin для мобильной части и JavaScript (TypeScript) для веба будет иметь следующие последствия:

Плюсы:
- Высокая производительность и отзывчивость интерфейса благодаря современным языкам.
- Упрощенная разработка и поддержка кода благодаря лаконичному синтаксису Kotlin и статической типизации TypeScript.
- Возможность использования существующих библиотек и инструментов в экосистемах Android и веба.

Минусы:
- Необходимость обучения команды, если у них нет достаточного опыта работы с выбранными языками.
- Потенциальные проблемы при интеграции между мобильной и веб-версиями приложения.

Риски:
- Недостаточная производительность или безопасность при неправильном использовании языков или библиотек. Это можно минимизировать путем тщательного тестирования и оптимизации.
- Сложности при найме разработчиков, знакомых с Kotlin или TypeScript. Решением может быть организация обучения для существующих сотрудников.

Затронутые области
Данное решение затронет следующие области системы:
Архитектура клиентской части: Необходимость интеграции кода на Kotlin и JavaScript в единую систему.
Инфраструктура: Обеспечение необходимых ресурсов и инструментов для разработки на Kotlin и TypeScript.
Процессы разработки: Адаптация процессов разработки и тестирования для работы с выбранными языками.
История
24.09.2024, Щетиловым, Уразаевым, Петуховым. Основные обсуждения касались требований к языку программирования для клиентской части, в результате которых мы пришли к Kotlin.
