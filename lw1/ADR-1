 ADR - [Выбор архитектурного подхода]

Дата: 11 сентября 2024 года 
Статус: Принято
 Контекст
В условиях большого количества пользователей и дальнейшего роста количества пользователей, приложение должно иметь высокую производительность и масштабируемость системы. Приложение должно обрабатывать миллионы пользователей одновременно, обеспечивая быструю загрузку видео, стабильную работу функций взаимодействия (лайки, комментарии, подписки) и безопасность данных пользователей.
Решение
Принято решение использовать серверный архитектурный подход для разработки приложения TikTok. Это решение было выбрано из-за следующих причин:
Масштабируемость: Серверный подход позволяет легко масштабировать ресурсы в зависимости от нагрузки, так как в TikTok огромная база пользователей.
Отказоустойчивость: Серверные архитектуры могут быть организованы с использованием кластеров и резервирования, что обеспечивает высокую доступность и минимизирует время простоя.
Безопасность данных: Серверный подход позволяет централизованно управлять данными и применять строгие меры безопасности, такие как шифрование и аутентификация.
Последствия
Плюсы:
Высокая производительность и возможность обработки большого количества запросов.
Гибкость в масштабировании ресурсов по мере роста пользовательской базы.
Минусы:
Необходимость в поддержании серверной инфраструктуры, что может увеличить затраты.
Зависимость от серверов может привести к более длительным временам отклика в случае перегрузки.
Риски:
Возможные сбои серверов, которые могут привести к простоям. 
Увеличение затрат на поддержку серверной инфраструктуры. Это можно снизить за счет оптимизации ресурсов и использования облачных решений.

Затронутые области
Серверная инфраструктура: необходимость в мощных серверах и системах хранения данных.
Безопасность: реализация протоколов безопасности и шифрования данных.
Системы мониторинга: внедрение инструментов для отслеживания производительности и доступности серверов.

История
11.09.2024, Щетиловым, Уразаевым, Петуховым. Основные обсуждения касались требований к масштабируемости и отказоустойчивости, в результате которых мы пришли к серверному варианту.
